---
# Source: flask-api/templates/cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mon-flask-api-flask-api
data:
  VAR: "env_ars"
  main.py: |-
    from flask import Flask
    import os
    app = Flask(__name__)


    @app.route("/")
    def hello_world():
        return """
            
            BONJOUR  <br>
            
            TOUT LE MONDE  <br>
            
            COMMENT  <br>
            
            CA  <br>
            
            VA ? <br>
            
        """
---
# Source: flask-api/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mon-flask-api-flask-api
spec:
  selector:
    app: mon-flask-api-flask-api
  ports:
    - port: 5050
  type: ClusterIP
---
# Source: flask-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mon-flask-api-flask-api
  labels:
    app: mon-flask-api-flask-api
spec:
  replicas: 1
  template:
    metadata:
      name:  mon-flask-api-flask-api
      annotations:
        checksum/cm: d39c1e97c07c23b905c4a9bdc6dc8dbb1ba74b2c7d3cb9bf71fcd45c3d06af24
      labels:
        app:  mon-flask-api-flask-api
    spec:
      imagePullSecrets:
        - name: regcred
      containers:
        - name:  mon-flask-api-flask-api
          image: rg.fr-par.scw.cloud/tp-s10/flask-api:0.0.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5050
              name: service
          env:
            - name: ENV_VAR1
              value: value_env_var_1
            - name: ENV_VAR2
              value: value_env_var_2
          volumeMounts:
            - mountPath: /app
              name: script
      restartPolicy: Always
      volumes:
        - name: script
          configMap:
            name: mon-flask-api-flask-api
  selector:
    matchLabels:
      app:  mon-flask-api-flask-api
---
# Source: flask-api/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mon-flask-api-flask-api
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
spec:
  ingressClassName: nginx
  rules:
    - host: flask-api.tp-s10.og-ingest1.com
      http:
        paths:
          - path: /
            # https://kubernetes.io/docs/concepts/services-networking/ingress/
            pathType: Prefix
            backend:
              service:
                name: mon-flask-api-flask-api
                port:
                  number: 5050
  tls:
    - hosts:
        -  flask-api.tp-s10.og-ingest1.com
      secretName: flask-api.tp-s10.og-ingest1.com-tls
